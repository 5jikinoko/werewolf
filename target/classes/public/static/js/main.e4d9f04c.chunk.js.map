{"version":3,"sources":["index.js"],"names":["ChatForm","props","state","text","inputText","this","setState","onClick","className","onChange","event","target","value","id","rows","warp","handleButton","type","React","Component","Chat","src","userName","getCookie","key","result","plainCookie","document","cookie","allCookies","split","i","Chats","chatsEl","useRef","messages","useEffect","current","scrollIntoView","length","ref","map","message","ChatArea","roomID","UUID","ws","bind","WebSocket","onopen","console","log","onmessage","m","JSON","parse","data","slice","newMessage","concat","onclose","jsonMessage","stringify","send","close","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e4d9f04c.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport './index.css';\n//import React from 'react';\nimport React, { Component, useEffect, useRef, useState, Fragment} from \"react\";\n\n\n//import { render } from 'react-dom';\n\nclass ChatForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: \"\",\n    }\n  }\n\n  handleButton(inputText) {\n    this.setState({ text: \"\" });\n    this.props.onClick(inputText);\n    //console.log(\"handlebutton\" + inputText + this.state.text);\n  }\n  render() {\n    const inputText = this.state.text;\n    return (\n      <form  className=\"chat-form\">\n        <textarea onChange={(event) => {this.setState({ text: event.target.value })}} value={inputText} className=\"chat-input\" id=\"input-chat\" rows=\"5\" warp=\"hard\"></textarea>\n        <button onClick={() => this.handleButton(inputText)} className=\"chat-button\" type=\"button\" >一般チャットで<br/>発言</button>\n      </form>\n    )\n  }\n}\n\nfunction Chat(props) {\n  //render() {\n    return (\n      <div className=\"chat-gutter\">\n        <div className=\"chat-contents-left\">\n          <img src='https://www.shibaura-it.ac.jp/touch-icon.png' className=\"user-icon\"/>\n        </div>\n        <div className=\"chat-contents-right\">\n          <div className=\"user-name\">\n              {props.userName}\n          </div>\n          <div className=\"chat-text\">\n              {props.text}\n          </div>\n        </div>\n      </div>\n  );//}\n}\n\nfunction getCookie(key) {\n  let result = null;\n  const plainCookie = document.cookie;\n  if(plainCookie !== \"\") {\n    let allCookies = plainCookie.split(\"; \");\n    for (let i = 0; i < allCookies; ++i) {\n      const cookie = allCookies[i].split(\"=\");\n      if (cookie[0] === key) {\n        result = cookie[1];\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconst Chats = (props) => {\n  const chatsEl = useRef(null);\n  const messages = props.messages;\n\n  useEffect(() => {\n    chatsEl.current.scrollIntoView();\n  }, [messages.length]);\n\n  return (\n    <div className=\"scroll-area\" ref={chatsEl}>\n      {messages.map( (message) => (\n        <Chat userName={message.userName} text={message.text} />\n      ))}\n    </div>\n  );\n}\n\nclass ChatArea extends React.Component {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      messages: [\n      ],\n      roomID: getCookie(\"roomID\"),\n      UUID: getCookie(\"UUID\"),\n      ws: null,\n    };\n    this.handleButton = this.handleButton.bind(this);\n  }\n\n\n  componentDidMount() {\n    let ws = new WebSocket(\"ws://160.16.141.77:51000/websocket\");\n    ws.onopen = () => {\n      console.log('connected')\n      this.setState({ ws: ws });\n    }\n    ws.onmessage = (m) => {\n      const message = JSON.parse(m.data);\n      let messages = this.state.messages.slice();\n      const newMessage = {userName: message.userName, text: message.text};\n      this.setState({\n      messages: messages.concat(newMessage)\n      })\n    }\n\n    ws.onclose = () => {\n      const messages = this.state.messages.slice();\n      const newMessage = {userName: \"システム\", text: \"通信が止まりました\"};\n      this.setState({\n        messages: messages.concat(newMessage)\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const ws = this.state.ws;\n    const message = {type: -1, UUID: this.UUID, text: \"\"}\n    const jsonMessage = JSON.stringify(message);\n    ws.send(jsonMessage);\n    ws.close();\n  }\n\n  displayMessage(m) {\n    const message = JSON.parse(m.data);\n    let messages = this.state.messages.slice();\n    const newMessage = {userName: message.userName, text: message.text};\n    this.setState({\n      messages: messages.concat(newMessage)\n    })\n  }\n\n  \n  /*constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }*/\n  \n/*  componentDidMount() {\n\n    fetch(\"https://jsondata.okiba.me/v1/json/OSvQA210610084219\")\n      .then(res => res.json())\n      .then(json => {\n          this.setState({\n            isLoaded: true,\n            items: json.rates\n          });\n      })\n      .catch(error => {\n        this.setState({\n          isLoaded: false,\n          error: error\n        });\n        console.error(error);\n      });\n  }*/\n  \n  sendMessage() {\n    const ws = this.state.ws;\n    const message = {UUID: this.state.UUID, type: 0, text: this.state.messages};\n    const jsonMessage = JSON.stringify(message);\n    ws.send(jsonMessage);\n  }\n\n  handleButton(inputText) {\n    const ws = this.state.ws;\n    const message = {type: 1, userName: \"al19009\", text: inputText};\n    const jsonMessage = JSON.stringify(message);\n    ws.send(jsonMessage);\n    /*\n    let newMessages = this.state.messages.slice();\n    const newMessage = {userName: \"al19009\", text: inputText};\n    console.log(\"button\" + inputText);\n    this.setState({\n      messages: newMessages.concat([newMessage]),\n    });\n    */\n  }\n\n  render() {\n    //const { isLoaded, items } = this.state;\n    /*if (!isLoaded) {\n      return <h3> Loading </h3>;\n    } else {*/\n      //const mess = '騎士さん!私を護衛して'\n      //console.log(\"render ChatArea\");\n      const messages = this.state.messages;\n\n      return (\n        <div className=\"chat-area\">\n          <div className=\"chat-container\">\n            <Chats messages={this.state.messages}/>\n          </div>\n          <ChatForm onClick={this.handleButton} />\n        </div>\n      );\n  }\n}\n\nclass App extends React.Component {\n\n  render() {\n    return(\n      <div className=\"main\">\n        <div className=\"left-bar\">\n          他プレイヤー情報\n        </div>\n        <div className=\"center-area\">\n          <div className=\"center-header\">\n            一日目夜　議論時間　03:21　4/10\n          </div>\n          <ChatArea/>\n        </div>\n        <div className=\"right-bar\">\n          自分の情報\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}